{"version":3,"file":"scope.js","sourceRoot":"","sources":["../../../temp/inline/lookups/scope.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe;AAInH;IAOE,gCAAY,OAAmB,EAAE,QAAkB;QALlD,gBAAW,GAAG,IAAI,YAAY,EAAE,CAAC;QAEjC,SAAI,GAAY,KAAK,CAAC;QACtB,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;QAG/B,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC3E,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,uBAAuB,EAAE,IAAI,CAAC,CAAC;QAC/E,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;IAC5E,CAAC;IAED,8CAAa,GAAb,UAAc,KAAU;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IACI,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE,+rBAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,qCAAc,GAA2C;QAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAClC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAChC,CAAC;IACF,6BAAC;AAAD,CAAC,AApCD,IAoCC;AAAA,CAAC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, Output, EventEmitter, ElementRef, Renderer} from '@angular/core';\nimport {NglLookupScopeItem} from './scope-item';\n\n\nexport class NglInternalLookupScope {\n   scope: NglLookupScopeItem;\n   scopeChange = new EventEmitter();\n\n   open: boolean = false;\n   openChange = new EventEmitter();\n\n  constructor(element: ElementRef, renderer: Renderer) {\n    renderer.setElementClass(element.nativeElement, 'slds-align-middle', true);\n    renderer.setElementClass(element.nativeElement, 'slds-m-left--xx-small', true);\n    renderer.setElementClass(element.nativeElement, 'slds-shrink-none', true);\n  }\n\n  onScopeChange(scope: any) {\n    this.scopeChange.emit(scope);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-internal-lookup-scope',\n  template: `\n    <span nglDropdown [open]=\"open\" (openChange)=\"openChange.emit($event)\"><ng-content></ng-content><button class=\"slds-button slds-button--icon slds-button-space-left slds-shrink-none\" nglDropdownTrigger><svg class=\"slds-button__icon\" nglIconCategory=\"utility\" nglIcon=\"down\"></svg></button><div class=\"slds-dropdown slds-dropdown--left\" *ngIf=\"open\"><ul class=\"dropdown__list\"><li class=\"slds-dropdown__item\" *ngFor=\"let s of scope.scopes\" (click)=\"onScopeChange(s)\" (keydown.Enter)=\"onScopeChange(s)\"><a role=\"menuitem\" nglDropdownItem><template [ngTemplateOutlet]=\"scope.templateRef\" [ngOutletContext]=\"{ $implicit: s }\"></template></a></li></ul></div></span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scope': [{ type: Input },],\n'scopeChange': [{ type: Output },],\n'open': [{ type: Input },],\n'openChange': [{ type: Output },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}