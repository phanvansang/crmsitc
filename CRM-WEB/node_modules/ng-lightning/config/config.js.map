{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../temp/inline/config/config.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAE,YAAY,EAAE,WAAW,EAAE,MAAM,EAAC,MAAM,eAAe;AAG3E,OAAO,IAAM,UAAU,GAAG,IAAI,WAAW,CAAC,YAAY,CAAC,CAAC;AAGxD;IAUE,mBAAa,MAAyB;QAAzB,sBAAyB,GAAzB,aAAyB;QARtC,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;QAEtB,WAAM,GAAe;YAC3B,OAAO,EAAE,cAAc;YACvB,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,SAAS;SAC1B,CAAC;QAGA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,0BAAM,GAAN,UAAO,MAAkB;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;IACvB,CAAC;IAED,uBAAG,GAAH,UAAI,GAAW;QACb,MAAM,CAAO,IAAI,CAAC,MAAO,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IACI,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,UAAU,EAAG,EAAE,EAAG,EAAC;KACxE,EAF6F,CAE7F,CAAC;IACF,gBAAC;AAAD,CAAC,AA7BD,IA6BC;AAED,qBAAqB;AACrB,gCAAgC,MAAuC;IAAvC,sBAAuC,GAAvC,WAAU,sBAAsB,EAAE,IAAI,EAAC;IACrE,MAAM,CAAC,UAAU,WAAqB;QACpC,IAAA,0BAAqD,EAA/C,sBAAQ,EAAE,4BAAW,CAA2B;QAEtD,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG;YAAA,iBAiBhC;YAhBC,IAAM,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;YAE9D,EAAE,CAAC,CAAC,CAAC,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC1D,MAAM,KAAK,CAAC,wDAAqD,MAAM,CAAC,sBAAsB,OAAG,CAAC,CAAC;YACrG,CAAC;YAED,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAC1D,EAAE,CAAC,CAAC,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAC5B,KAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC5B,CAAC;gBACD,iBAAiB,CAAC,YAAY,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;QACH,CAAC,CAAC;QAEF,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;YACpC,CAAC;YAED,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAAA,CAAC","sourcesContent":["import {Injectable, EventEmitter, OpaqueToken, Inject} from '@angular/core';\nimport {INglConfig} from './config.interface';\n\nexport const NGL_CONFIG = new OpaqueToken('NGL_CONFIG');\n\n\nexport class NglConfig {\n\n  _emitter = new EventEmitter();\n\n  private values: INglConfig = {\n    svgPath: 'assets/icons',\n    ratingColorOn: '#FFB75D',\n    ratingColorOff: '#54698D',\n  };\n\n  constructor( config: INglConfig = null) {\n    this.values = Object.assign({}, this.values, config || {});\n  }\n\n  update(config: INglConfig) {\n    this.values = Object.assign({}, this.values, config || {});\n    this._emitter.emit();\n  }\n\n  get(key: string) {\n    return (<any>this.values)[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [NGL_CONFIG, ] }, ]},\n];\n}\n\n// Intrenal decorator\nexport function NglConfigurable(config = {changeDetectorProperty: 'cd'}) {\n  return function (constructor: Function) {\n    let { ngOnInit, ngOnDestroy } = constructor.prototype;\n\n    constructor.prototype.ngOnInit = function() {\n      const changeDetectorRef = this[config.changeDetectorProperty];\n\n      if (!changeDetectorRef || !changeDetectorRef.markForCheck) {\n        throw Error(`NglConfig: invalid ChangeDetectorRef at property \"${config.changeDetectorProperty}\"`);\n      }\n\n      this.nglConfigSubscription = this.config._emitter.subscribe(() => {\n        if (this.nglOnConfigChanges) {\n          this.nglOnConfigChanges();\n        }\n        changeDetectorRef.markForCheck();\n      });\n\n      if (ngOnInit) {\n        ngOnInit.call(this);\n      }\n    };\n\n    constructor.prototype.ngOnDestroy = function() {\n      if (this.nglConfigSubscription) {\n        this.nglConfigSubscription.unsubscribe();\n        this.nglConfigSubscription = null;\n      }\n\n      if (ngOnDestroy) {\n        ngOnDestroy.call(this);\n      }\n    };\n  };\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}