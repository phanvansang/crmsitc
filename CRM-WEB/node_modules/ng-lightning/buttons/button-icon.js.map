{"version":3,"file":"button-icon.js","sourceRoot":"","sources":["../../../temp/inline/buttons/button-icon.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe;OAC7D,EAAC,YAAY,EAAC,MAAM,cAAc;AAEzC,IAAM,YAAY,GAAW,QAAQ,CAAC;AAGtC;IASE,uBAAmB,OAAmB,EAAS,QAAkB;QAA9C,YAAO,GAAP,OAAO,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAC/D,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;QAC/E,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;IACpF,CAAC;IARA,sBAAI,wCAAa;aAAjB,UAAkB,IAA6D;YAC9E,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;;;OAAA;IAOO,iCAAS,GAAjB,UAAkB,IAAa;QAC7B,MAAM,CAAC,uBAAoB,IAAI,KAAK,IAAI,GAAG,EAAE,GAAG,OAAI,IAAI,IAAI,YAAY,CAAE,CAAE,CAAC;IAC/E,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,iBAAiB;iBAC5B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,4BAAc,GAA2C;QAChE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KAClC,CAAC;IACF,oBAAC;AAAD,CAAC,AA9BD,IA8BC","sourcesContent":["import {Directive, Input, ElementRef, Renderer} from '@angular/core';\nimport {replaceClass} from '../util/util';\n\nconst DEFAULT_TYPE: string = 'border';\n\n\nexport class NglButtonIcon {\n\n  private _type: string;\n\n   set nglButtonIcon(type: 'container' | 'border' | 'border-filled' | 'small' | '') {\n    replaceClass(this, this.normalize(this._type), this.normalize(type));\n    this._type = type;\n  }\n\n  constructor(public element: ElementRef, public renderer: Renderer) {\n    this.renderer.setElementClass(this.element.nativeElement, 'slds-button', true);\n    this.renderer.setElementClass(this.element.nativeElement, this.normalize(), true);\n  }\n\n  private normalize(type?: string): string {\n    return `slds-button--icon${type === `''` ? '' : `-${type || DEFAULT_TYPE}`}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[nglButtonIcon]',\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'nglButtonIcon': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}