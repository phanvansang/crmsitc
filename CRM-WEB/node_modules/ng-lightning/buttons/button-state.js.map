{"version":3,"file":"button-state.js","sourceRoot":"","sources":["../../../temp/inline/buttons/button-state.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe;OACjG,EAAC,SAAS,EAAC,MAAM,cAAc;AAGtC;IAcE,wBAAmB,OAAmB,EAAS,QAAkB;QAA9C,YAAO,GAAP,OAAO,CAAY;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAFhE,mBAAc,GAAG,IAAI,YAAY,EAAW,CAAC;IAEsB,CAAC;IAXpE,sBAAI,oCAAQ;aAMb;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;aARA,UAAa,SAAS;YACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;YAEtC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YACrD,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzD,CAAC;;;OAAA;IASD,uCAAc,GAAd;QACE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;IAEO,oCAAW,GAAnB,UAAoB,SAAiB,EAAE,KAAc;QACnD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC9E,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,kBAAkB;oBAC5B,IAAI,EAAE;wBACJ,WAAW,EAAE,WAAW;qBACzB;iBACF,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;QACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;KACjB,EAH6F,CAG7F,CAAC;IACK,6BAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAG,EAAE,EAAE;QAC1D,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,sBAAsB,EAAG,EAAE,EAAE;QACvE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;KAC7D,CAAC;IACF,qBAAC;AAAD,CAAC,AA1CD,IA0CC;AAAA,CAAC","sourcesContent":["import {Directive, Input, Output, EventEmitter, HostListener, ElementRef, Renderer} from '@angular/core';\nimport {toBoolean} from '../util/util';\n\n\nexport class NglButtonState {\n\n  _selected: boolean;\n   set selected(_selected) {\n    this._selected = toBoolean(_selected);\n\n    this.toggleClass('slds-is-selected', this._selected);\n    this.toggleClass('slds-not-selected', !this._selected);\n  }\n  get selected() {\n    return this._selected;\n  }\n   selectedChange = new EventEmitter<boolean>();\n\n  constructor(public element: ElementRef, public renderer: Renderer) {}\n\n  \n  onSelectChange() {\n    this.selectedChange.emit(!this.selected);\n  }\n\n  private toggleClass(className: string, isAdd: boolean) {\n    this.renderer.setElementClass(this.element.nativeElement, className, isAdd);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[nglButtonState]',\n  host: {\n    'aria-live': 'assertive',\n  },\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input, args: ['nglButtonState', ] },],\n'selectedChange': [{ type: Output, args: ['nglButtonStateChange', ] },],\n'onSelectChange': [{ type: HostListener, args: ['click', ] },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}