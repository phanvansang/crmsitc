{"version":3,"file":"checkbox-toggle.js","sourceRoot":"","sources":["../../../../temp/inline/forms/elements/checkbox-toggle.ts"],"names":[],"mappings":";;;;;OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,uBAAuB,EAAE,YAAY,EAAE,iBAAiB,EAAmB,MAAM,eAAe;OACnH,EAAC,cAAc,EAAC,MAAM,WAAW;OACjC,EAAC,eAAe,EAAC,MAAM,SAAS;OAChC,EAAC,oBAAoB,EAAC,MAAM,eAAe;AAGlD;IAAkD,gDAAc;IAU9D,sCAAY,QAA2B;QACrC,kBAAM,QAAQ,CAAC,CAAC;QAJjB,gBAAW,GAAW,SAAS,CAAC;QAChC,iBAAY,GAAW,UAAU,CAAC;IAInC,CAAC;IAED,iBAAiB;IACjB,yDAAkB,GAAlB;QACE,gBAAK,CAAC,kBAAkB,WAAE,CAAC;IAC7B,CAAC;IACI,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,0BAA0B;oBACpC,QAAQ,EAAE,wmBAET;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,IAAI,EAAE;wBACJ,2BAA2B,EAAE,MAAM;wBACnC,wBAAwB,EAAE,SAAS;qBACpC;oBACD,SAAS,EAAE,CAAE,EAAC,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,4BAA4B,EAAC,CAAE;oBACnF,MAAM,EAAE,CAAC,2BAA2B,CAAC;iBACtC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,iBAAiB,GAAG;KAC1B,EAF6F,CAE7F,CAAC;IACK,2CAAc,GAA2C;QAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAE;QACjE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;QACjD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAG,EAAE,EAAE;QACrE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;KACjC,CAAC;IACF,mCAAC;AAAD,CAAC,AA7CD,CAAkD,cAAc,GA6C/D;AAAA,CAAC","sourcesContent":["import {Component, Input, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, AfterContentInit} from '@angular/core';\nimport {NglFormElement} from './element';\nimport {NglFormCheckbox} from './input';\nimport {NglFormLabelTemplate} from '../form-label';\n\n\nexport class NglFormElementCheckboxToggle extends NglFormElement implements AfterContentInit {\n   contentEl: NglFormCheckbox;\n\n   labelStr: string;\n   labelTpl: NglFormLabelTemplate;\n\n   error: string;\n   enabledText: string = 'Enabled';\n   disabledText: string = 'Disabled';\n\n  constructor(detector: ChangeDetectorRef) {\n    super(detector);\n  }\n\n  // AoT workaround\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngl-form-checkbox-toggle',\n  template: `\n    <label class=\"slds-checkbox--toggle slds-grid\"><abbr class=\"slds-required\" *ngIf=\"required\" title=\"required\">*</abbr><span class=\"slds-form-element__label slds-m-bottom--none\" [nglInternalOutlet]=\"_label\"></span><ng-content></ng-content><span class=\"slds-checkbox--faux_container\" [attr.for]=\"uid\" aria-live=\"assertive\"><span class=\"slds-checkbox--faux\"></span><span class=\"slds-checkbox--on\">{{enabledText}}</span><span class=\"slds-checkbox--off\">{{disabledText}}</span></span></label><div class=\"slds-form-element__help\" *ngIf=\"error\" [id]=\"'error_' + uid\">{{error}}</div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.slds-form-element]': 'true',\n    '[class.slds-has-error]': '!!error',\n  },\n  providers: [ {provide: NglFormElement, useExisting: NglFormElementCheckboxToggle} ],\n  styles: [`:host { display: block; }`],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'contentEl': [{ type: ContentChild, args: [NglFormCheckbox, ] },],\n'labelStr': [{ type: Input, args: ['label', ] },],\n'labelTpl': [{ type: ContentChild, args: [NglFormLabelTemplate, ] },],\n'error': [{ type: Input },],\n'enabledText': [{ type: Input },],\n'disabledText': [{ type: Input },],\n};\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}